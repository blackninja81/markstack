name: Deploy to cPanel via cPanel API
on:
  push:
    branches: [master]  # Change to your default branch name if different
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # Create a zip from the dist directory with explicit path handling
      - name: Create deployment package
        run: |
          timestamp=$(date +%s)
          DEPLOY_ZIP="deploy_${timestamp}.zip"
          echo "DEPLOY_ZIP=$DEPLOY_ZIP" >> $GITHUB_ENV
          cd dist && zip -r "$GITHUB_WORKSPACE/$DEPLOY_ZIP" . && cd ..
          echo "Created zip file: $GITHUB_WORKSPACE/$DEPLOY_ZIP"
          ls -la "$GITHUB_WORKSPACE"  # List files in workspace to verify zip creation
      - name: Upload and extract to cPanel using API
        env:
          CPANEL_USERNAME: ${{ secrets.CPANEL_USERNAME }}
          CPANEL_API_TOKEN: ${{ secrets.CPANEL_API_TOKEN }}
          CPANEL_DOMAIN: ${{ secrets.CPANEL_DOMAIN }}
          CPANEL_EXTRACT_DIR: /bookmark.johnkaburu.co.ke  # Change this to the desired cPanel directory
        run: |
          echo "Using CPANEL_DOMAIN: $CPANEL_DOMAIN"
          echo "Uploading and extracting to CPANEL_EXTRACT_DIR: $CPANEL_EXTRACT_DIR"
          
          # Check if the zip file exists
          if [ ! -f "$GITHUB_WORKSPACE/$DEPLOY_ZIP" ]; then
            echo "Error: Zip file $DEPLOY_ZIP not found."
            exit 1
          fi
          
          # Upload the zip file using cPanel API
          UPLOAD_URL="https://$CPANEL_DOMAIN:2083/execute/Fileman/upload_files"
          echo "Upload URL: $UPLOAD_URL"
          
          curl -H "Authorization: cpanel ${CPANEL_USERNAME}:${CPANEL_API_TOKEN}" \
               -F "dir=$CPANEL_EXTRACT_DIR" \
               -F "file=@$GITHUB_WORKSPACE/$DEPLOY_ZIP" \
               "$UPLOAD_URL" || { echo "Upload failed"; exit 1; }
          
          # Extract the zip file using cPanel API
          EXTRACT_URL="https://$CPANEL_DOMAIN:2083/execute/ZipArchive/unzip"
          echo "Extract URL: $EXTRACT_URL"
          
          # Extract the zip file and capture the response
          RESPONSE=$(curl -H "Authorization: cpanel ${CPANEL_USERNAME}:${CPANEL_API_TOKEN}" \
               -d "source=$CPANEL_EXTRACT_DIR/$(basename $DEPLOY_ZIP)" \
               -d "destination=$CPANEL_EXTRACT_DIR" \
               -d "overwrite=1" \
               "$EXTRACT_URL")
          
          echo "Extraction Response: $RESPONSE"
          
          # Check if extraction was successful
          if [[ "$RESPONSE" == *"success"* ]]; then
            echo "Extraction successful."
          else
            echo "Extraction failed with response: $RESPONSE"
            exit 1
          fi
          
          # Cleanup deployment zip file
          CLEANUP_URL="https://$CPANEL_DOMAIN:2083/execute/Fileman/delete_file"
          echo "Cleanup URL: $CLEANUP_URL"
          
          curl -H "Authorization: cpanel ${CPANEL_USERNAME}:${CPANEL_API_TOKEN}" \
               -d "dir=$CPANEL_EXTRACT_DIR" \
               -d "file=$(basename $DEPLOY_ZIP)" \
               "$CLEANUP_URL" || { echo "Cleanup failed"; exit 1; }
      - name: Verify deployment
        if: success()
        run: |
          echo "Deployment completed successfully"
          echo "Timestamp: $(date)"
      - name: Handle failure
        if: failure()
        run: |
          echo "Deployment failed"
          echo "Contents of current directory:"
          ls -la
